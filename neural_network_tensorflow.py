# -*- coding: utf-8 -*-
"""Neural Network tensorflow

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dRAVn7fMXjnj8NESmrRKW2B5QC1S0Ghb
"""

import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

(train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.mnist.load_data()

train_images = train_images.astype("float32") / 255

test_images = test_images.astype("float32") / 255

train_images

test_images

fig, axes = plt.subplots(1, 10, figsize = (10, 10))

for i in range(10):
  axes[i].imshow(train_images[i].reshape(28, 28), cmap = "gray")
  axes[i].set_title(train_labels[i])
  axes[i].axis("off")
plt.show()

model = models.Sequential([layers.Flatten(input_shape = (28, 28, 1)), layers.Dense(128, activation = "relu"), layers.Dense(64, activation = "relu"), layers.Dense(10, activation = "softmax")])

model.compile(optimizer = "adam", loss = "sparse_categorical_crossentropy", metrics = ["accuracy"])
histroy = model.fit(train_images, train_labels, epochs = 5)

def view_classify(image, probabilities):
  fig, (ax1, ax2) = plt.subplots(figsize = (6, 9), ncols = 2)
  ax1.imshow(image)
  ax1.axis("off")
  ax2.barh(np.arange(10), probabilities)
  ax2.set_aspect(0.1)
  ax2.set_yticks(np.arange(10))
  ax2.set_yticklabels(np.arange(10))
  ax2.set_xlim(0, 1.1)
  plt.tight_layout()

image, label = test_images[0], test_labels[0]
probabilities = model.predict(image.reshape(1, 28, 28, 1))
view_classify(image, probabilities[0])

test_loss, test_accuracy = model.evaluate(test_images, test_labels)
print(f"Accuracy of the neural network on the {test_images.shape[0]} test images: {test_accuracy * 100:2f}%")


# -*- coding: utf-8 -*-
"""Neural Network tensorlow fashion mnist 2D

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KGuNil5vZBkMxiDS6fY2x5ZS1XSfIZey
"""

import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras import layers, models
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

(train_fashion_images, train_fashion_labels), (test_fashion_images, test_fashion_labels) = tf.keras.datasets.fashion_mnist.load_data()

train_fashion_images = train_fashion_images.astype("float32") / 255
test_fashion_images = test_fashion_images.astype("float32") / 255

train_fashion_images = train_fashion_images[..., None]
test_fashion_images = test_fashion_images[..., None]

train_fashion_labels = to_categorical(train_fashion_labels)
test_fashion_labels = to_categorical(test_fashion_labels)

model = models.Sequential([
    layers.Conv2D(32, (3, 3), padding = "same", activation = "relu", input_shape = (28, 28, 1)),
    layers.BatchNormalization(),
    layers.MaxPooling2D((2,2)),

    layers.Conv2D(64, (3, 3), padding = "same", activation = "relu"),
    layers.BatchNormalization(),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(128, (3, 3), padding = "same", activation = "relu"),
    layers.BatchNormalization(),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(256, (3, 3), padding = "same", activation = "relu"),
    layers.BatchNormalization(),
    layers.MaxPooling2D((2, 2)),

    layers.Flatten(),
    layers.Dense(128, activation = "relu"),
    layers.Dropout(0.5),
    layers.Dense(10, activation = "softmax")

    ])

model.compile(optimizer = "adam", loss = "categorical_crossentropy", metrics = ["accuracy"])

histt = model.fit(train_fashion_images, train_fashion_labels, epochs = 15, batch_size = 64, validation_split = 0.2)

plt.figure(figsize = (12, 5))
plt.subplot(1, 2, 1)
plt.plot(histt.history['accuracy'], label = "Train Accuracy")
plt.plot(histt.history["val_accuracy"], label = "Val Accuracy")
plt.title("Accuracy")
plt.xlabel("epoch")
plt.ylabel("accuracy")
plt.legend()
plt.grid(True)
plt.show()

from google.colab import files
uploaded = files.upload()

filename = list(uploaded.keys())[0]
img = image.load_img(filename, color_mode = "grayscale", target_size = (28, 28))
img_array = image.img_to_array(img)
img_array = img_array / 255
img_array = img_array.reshape(1, 28, 28, 1)
plt.imshow(img_array[0], cmap = "gray")
plt.title("Image")
plt.show()
calss_names = ["T-shirt/top", "Trouser", "Pullover", "Dress", "Coat", "Sandal", "Shirt", "Sneaker", "Bag", "Ankle boot"]

pred = model.predict(img_array)
predclass = np.argmax(pred)
confidence = pred[0][predclass]

print(f"Predicted class: {predclass} ({calss_names[predclass]})")
print(f"Confidence: {confidence: .2%}")


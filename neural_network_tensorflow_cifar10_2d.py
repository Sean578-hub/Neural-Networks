# -*- coding: utf-8 -*-
"""Neural Network tensorflow cifar10 2D

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15qMIOIA2O0qF3tCBt_RJVg5e-E_UvbO7
"""

import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras import datasets
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.preprocessing import image
from google.colab import files
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

(x_train, y_train), (x_test, y_test) = datasets.cifar10.load_data()

x_train = x_train / 255
x_test = x_test / 255

model = models.Sequential([
    layers.Conv2D(32, (3, 3), padding = "same", activation = "relu", input_shape = (32, 32, 3)),
    layers.BatchNormalization(),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(64, (3, 3), padding = "same", activation = "relu"),
    layers.BatchNormalization(),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(128, (3, 3), padding = "same", activation = "relu"),
    layers.BatchNormalization(),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(256, (3, 3), padding = "same", activation = "relu"),
    layers.BatchNormalization(),
    layers.MaxPooling2D((2, 2)),

    layers.Flatten(),
    layers.Dense(128, activation = "relu"),
    layers.Dense(10, activation = "softmax")

    ])

model.compile(optimizer = "adam", loss = "sparse_categorical_crossentropy", metrics = ["accuracy"])

histt = model.fit(x_train, y_train, epochs = 10, batch_size = 64, validation_split = 0.2)

class_names = ["airplane", "automobile", "bird", "cat", "deer", "dog", "frog", "horse", "ship", "truck"]
uploded = files.upload()

for file_name in uploded.keys():
  img_path = file_name
  img = image.load_img(img_path, target_size = (32, 32))

plt.imshow(img)
plt.axis("off")
plt.title("Uploaded Image")
plt.show()

img_array = image.img_to_array(img)
img_array = img_array / 255.0
img_array = np.expand_dims(img_array, axis = 0)

prediction = model.predict(img_array)
predicted_class = np.argmax(prediction)

print(f"Predicted class name: {class_names[predicted_class]}")

plt.figure(figsize = (12, 5))
plt.subplot(1, 2, 1)
plt.plot(histt.history["accuracy"], label = "Train Accuracy")
plt.plot(histt.history["val_accuracy"], label = "Val Accuracy")
plt.title("Accuracy")
plt.xlabel("epoches")
plt.ylabel("accuracy")
plt.legend()
plt.grid(True)
plt.show()

